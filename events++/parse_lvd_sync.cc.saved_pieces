//---------------------------------------------------------------------------//
#define RUN_FEB
//#define R2006_11_08
//#define RUN_1211
//#define RUN_1230
//#define Q15
#ifdef Q15
struct is_info is_info[]={
    {   1,  true, 0,              0,  0., "leer", "leer"},
    {  -1, false, 0,             -1,  0.,    "",    "nix"}
};
#endif
#ifdef R2006_11_08
struct is_info is_info[]={
    {   2, false, 0,             21,  9.256592e-06, "w09",    "F1/FPC"},
    {   3,  true, modtypes_3,    13,  2.149383e-06, "w10",    "GPX"},
    {   4,  true, modtypes_4,     4,  3.589851e-06, "w17",    "SQDC aeussere Halbschale hinten"},
    {   5,  true, modtypes_5,    11,  7.169492e-10, "w16",    "FQDC"},
    {   6,  true, modtypes_6,     3,  -7.012642e-07, "w18",    "SQDC aeussere Halbschale vorne"},
    {   7,  true, modtypes_7,     1,  -1.331155e-06, "w08",    "SQDC innere Halbschale vorne"},
    {   8,  true, modtypes_8,     2,  -1.221058e-06, "w14",    "SQDC innere Halbschale hinten"},
    {   9,  true, modtypes_9,    12,  -2.842281e-06, "w15",    "FQDC"},
    {  10,  false, 0,             22, 0., "w11",    "F1/MDC1"},
    {  11, false, 0,             23,  2.827856e-05, "w12",    "F1/MDC2"},
    {  12, false, 0,             24,  2.696089e-05, "w13",    "F1/MDC3"},
    {  13,  true, modtypes_13,    5,  3.558081e-07, "w07",    "SQDC SEB und Summierer"},
    { 100, false, 0,             -1,  0., "w14",    "timestamp"},
    {  -1, false, 0,             -1,  0.,    "",    "nix"}
};
#endif
#ifdef RUN_FEB
struct is_info is_info[]={
    {   1, false, 0,             31,  0., "scaler", "scaler"},
    {   2,  true, 0,             21,  0., "w09",    "F1/FPC"},
    {   3,  true, modtypes_3,    13,  0., "w10",    "GPX"},
    {   4,  true, modtypes_4,     4,  0., "w17",    "SQDC aeussere Halbschale hinten"},
    {   5,  true, modtypes_5,    11,  0., "w16",    "FQDC"},
    {   6,  true, modtypes_6,     3,  0., "w18",    "SQDC aeussere Halbschale vorne"},
    {   7,  true, modtypes_7,     1,  0., "w08",    "SQDC innere Halbschale vorne"},
    {   8,  true, modtypes_8,     2,  0., "w14",    "SQDC innere Halbschale hinten"},
    {   9,  true, modtypes_9,    12,  0., "w15",    "FQDC"},
    {  13,  true, modtypes_13,    5,  0., "w07",    "SQDC SEB und Summierer"},
    {  10,  true, 0,             22,  0., "w11",    "F1/MDC1"},
    {  11,  true, 0,             23,  0., "w12",    "F1/MDC2"},
    {  12,  true, 0,             24,  0., "w13",    "F1/MDC3"},
    {  50,  true, 0,             -1,  0., "w06",    "F1/pellet structure test"},
    { 100, false, 0,             -1,  0., "w14",    "timestamp"},
    {2000, false, modtypes_2000, -1,  0., "w01",    "sync"},
    {  -1, false, 0,             -1,  0.,    "",    "nix"}
};
#endif
#ifdef RUN_1190
struct is_info is_info[]={
    {   1, false, 0,             31,  0., "scaler", "scaler"},
    {   2,  true, 0,             21,  0., "w09",    "F1/FPC"},
    {   3,  true, modtypes_3,    13,  5.047362e-06, "w10",    "GPX"},
    {   4,  true, modtypes_4,     4,  2.606809e-06, "w17",    "SQDC aeussere Halbschale hinten"},
    {   5,  true, modtypes_5,    11, -8.182480e-07, "w16",    "FQDC"},
    {   6,  true, modtypes_6,     3,  5.855271e-07, "w18",    "SQDC aeussere Halbschale vorne"},
    {   7,  true, modtypes_7,     1,  1.603863e-08, "w08",    "SQDC innere Halbschale vorne"},
    {   8,  true, modtypes_8,     2, -1.772749e-06, "w14",    "SQDC innere Halbschale hinten"},
    {   9,  true, modtypes_9,    12,  1.162707e-05, "w15",    "FQDC"},
    {  13,  true, modtypes_13,    5,  1.154911e-06, "w07",    "SQDC SEB und Summierer"},
    {  10,  true, 0,             22,  0., "w11",    "F1/MDC1"},
    {  11,  true, 0,             23,  0., "w12",    "F1/MDC2"},
    {  12,  true, 0,             24,  0., "w13",    "F1/MDC3"},
    {  50,  true, 0,             -1,  0., "w06",    "F1/pellet structure test"},
    { 100, false, 0,             -1,  0., "w14",    "timestamp"},
    {2000,  true, modtypes_2000, -1, -1.772288e-06, "w01",    "sync"},
    {  -1, false, 0,             -1,  0.,    "",    "nix"}
};
#endif
#ifdef RUN_1211
struct is_info is_info[]={
    {   1, false, 0,             31,  0., "scaler", "scaler"},
    {   2,  true, 0,             21,  0., "w09",    "F1/FPC"},
    {   3,  true, modtypes_3,    13,  3.547568e-06, "w10",    "GPX"},
    {   4,  true, modtypes_4,     4,  2.742642e-06, "w17",    "SQDC aeussere Halbschale hinten"},
    {   5,  true, modtypes_5,    11, -2.143026e-06, "w16",    "FQDC"},
    {   6,  true, modtypes_6,     3,  2.904280e-06, "w18",    "SQDC aeussere Halbschale vorne"},
    {   7, false, modtypes_7,     1,  5.587001e-04, "w08",    "SQDC innere Halbschale vorne"},
    {   8,  true, modtypes_8,     2, -3.373901e-06, "w14",    "SQDC innere Halbschale hinten"},
    {   9,  true, modtypes_9,    12,  9.105238e-06, "w15",    "FQDC"},
    {  13,  true, modtypes_13,    5, -2.914105e-07, "w07",    "SQDC SEB und Summierer"},
    {  10,  true, 0,             22,  0., "w11",    "F1/MDC1"},
    {  11,  true, 0,             23,  0., "w12",    "F1/MDC2"},
    {  12,  true, 0,             24,  0., "w13",    "F1/MDC3"},
    {  50,  true, 0,             -1,  0., "w06",    "F1/pellet structure test"},
    { 100, false, 0,             -1,  0., "w14",    "timestamp"},
    {2000,  true, modtypes_2000, -1, -3.277736e-06, "w01",    "sync"},
    {  -1, false, 0,             -1,  0.,    "",    "nix"}
};
#endif
#ifdef RUN_1212
struct is_info is_info[]={
    {   1,  true, 0,             31,  0., "scaler", "scaler"},
    {   2,  true, 0,             21,  0., "w09",    "F1/FPC"},
    {   3,  true, modtypes_3,    13,  3.408259e-06, "w10",    "GPX"},
    {   4,  true, modtypes_4,     4,  2.664772e-06, "w17",    "SQDC aeussere Halbschale hinten"},
    {   5,  true, modtypes_5,    11, -2.265436e-06, "w16",    "FQDC"},
    {   6,  true, modtypes_6,     3,  3.012740e-06, "w18",    "SQDC aeussere Halbschale vorne"},
    {   7,  true, modtypes_7,     1, -1.821683e-07, "w08",    "SQDC innere Halbschale vorne"},
    {   8,  true, modtypes_8,     2, -3.403956e-06, "w14",    "SQDC innere Halbschale hinten"},
    {   9,  true, modtypes_9,    12,  9.156846e-06, "w15",    "FQDC"},
    {  13,  true, modtypes_13,    5, -3.605938e-07, "w07",    "SQDC SEB und Summierer"},
    {  10,  true, 0,             22,  0., "w11",    "F1/MDC1"},
    {  11,  true, 0,             23,  0., "w12",    "F1/MDC2"},
    {  12,  true, 0,             24,  0., "w13",    "F1/MDC3"},
    {  50,  true, 0,             -1,  0., "w06",    "F1/pellet structure test"},
    { 100, false, 0,             -1,  0., "w14",    "timestamp"},
    {2000,  true, modtypes_2000, -1, -3.178811e-06, "w01",    "sync"},
    {  -1, false, 0,             -1,  0.,    "",    "nix"}
};
#endif
#ifdef RUN_1230
struct is_info is_info[]={
    {   1,  true, 0,             31,  0., "scaler", "scaler"},
    {   2,  true, 0,             21,  0., "w09",    "F1/FPC"},
    {   3,  true, modtypes_3,    13,  3.226674e-06, "w10",    "GPX"},
    {   4,  true, modtypes_4,     4,  2.304745e-06, "w17",    "SQDC aeussere Halbschale hinten"},
    {   5,  true, modtypes_5,    11, -2.638589e-06, "w16",    "FQDC"},
    {   6,  true, modtypes_6,     3,  2.447583e-06, "w18",    "SQDC aeussere Halbschale vorne"},
    {   7,  true, modtypes_7,     1, -9.657054e-07, "w08",    "SQDC innere Halbschale vorne"},
    {   8,  true, modtypes_8,     2, -3.606992e-06, "w14",    "SQDC innere Halbschale hinten"},
    {   9,  true, modtypes_9,    12,  8.210451e-06, "w15",    "FQDC"},
    {  13,  true, modtypes_13,    5, -3.399689e-07, "w07",    "SQDC SEB und Summierer"},
    {  10,  true, 0,             22,  0., "w11",    "F1/MDC1"},
    {  11,  true, 0,             23,  0., "w12",    "F1/MDC2"},
    {  12,  true, 0,             24,  0., "w13",    "F1/MDC3"},
    {  50,  true, 0,             -1,  0., "w06",    "F1/pellet structure test"},
    { 100, false, 0,             -1,  0., "w14",    "timestamp"},
    {2000, false, modtypes_2000, -1,  0., "w01",    "sync"},
    {  -1, false, 0,             -1,  0.,    "",    "nix"}
};
#endif
//---------------------------------------------------------------------------//
static int
resync_fifo(ems_fifo &fifo, double triggerdiff)
{
    struct is_info *is_info;
    is_info=static_cast<struct is_info*>(fifo.private_ptr);
    int removed=0;

    double tdiff=sev_tdiff(fifo, 0);
    if (fabs(tdiff-triggerdiff)>100.) {
        double tdiff1=sev_tdiff(fifo, 1);
        if (fabs(tdiff1-triggerdiff)<=100.) {
            cerr<<"remove subevent from IS "<<fifo.is_id<<endl;
            fifo.remove();
            removed=1;
        }
    }
    return removed;
}
//---------------------------------------------------------------------------//
static int
resync_event(double triggerdiff)
{
    int removed=0;
    for (int i=0; i<ems_data.nr_is; i++) {
        struct is_info *is_info;
        is_info=static_cast<struct is_info*>(ems_data.fifo[i].private_ptr);
        if (ems_data.fifo[i].ignore||!is_info->is_lvd)
            continue;
        removed+=resync_fifo(ems_data.fifo[i], triggerdiff);
    }
    return removed;    
}
//---------------------------------------------------------------------------//
#undef VERBOSE
static int
check_evtimes(double *triggerdiff)
{
    double tsum0, tsum, t0, t;
    int tnum;
    bool valid=true;

    tsum0=0.;
    tnum=0;
    for (int i=0; i<ems_data.nr_is; i++) {
        struct is_info *is_info;
        is_info=static_cast<struct is_info*>(ems_data.fifo[i].private_ptr);
        if (ems_data.fifo[i].ignore||!is_info->is_lvd)
            continue;
        if (sev_tdiff(ems_data.fifo[i], 0)>0.) {
            tsum0+=ems_data.fifo[i][0]->trigdiff0;
            tnum++;
        } else {
            valid=false;
        }
    }

    if (!valid) {
        *triggerdiff=-1;
        return 0;
    }
    t0=tsum0/tnum;

    // find the worst IS
    double deviation0=-1;
    int idx0=-1;
    for (int i=0; i<ems_data.nr_is; i++) {
        struct is_info *is_info;
        is_info=static_cast<struct is_info*>(ems_data.fifo[i].private_ptr);
        if (ems_data.fifo[i].ignore||!is_info->is_lvd)
            continue;
        double xdeviation=fabs(ems_data.fifo[i][0]->trigdiff0-t0);
        if (xdeviation>deviation0) {
            deviation0=xdeviation;
            idx0=i;
        }
    }

    // recalculate average
    tsum0=0.;
    tnum=0;
    for (int i=0; i<ems_data.nr_is; i++) {
        struct is_info *is_info;
        is_info=static_cast<struct is_info*>(ems_data.fifo[i].private_ptr);
        if (ems_data.fifo[i].ignore||!is_info->is_lvd||(i==idx0))
            continue;
        tsum0+=ems_data.fifo[i][0]->trigdiff0;
        tnum++;
    }
    t0=tsum0/tnum;

    // find the 2nd worst IS
    double deviation1=-1;
    int idx1=-1;
    for (int i=0; i<ems_data.nr_is; i++) {
        struct is_info *is_info;
        is_info=static_cast<struct is_info*>(ems_data.fifo[i].private_ptr);
        if ((ems_data.fifo[i].ignore)||!is_info->is_lvd||(i==idx0))
            continue;
        double xdeviation=fabs(ems_data.fifo[i][0]->trigdiff0-t0);
        if (xdeviation>deviation1) {
            deviation1=xdeviation;
            idx1=i;
        }
    }

    // recalculate average
    tsum0=0.;
    tsum=0.;
    tnum=0;
    for (int i=0; i<ems_data.nr_is; i++) {
        struct is_info *is_info;
        is_info=static_cast<struct is_info*>(ems_data.fifo[i].private_ptr);
        if (ems_data.fifo[i].ignore||!is_info->is_lvd||(i==idx0)||(i==idx1))
            continue;
        tsum0+=ems_data.fifo[i][0]->trigdiff0;
        tsum+=ems_data.fifo[i][0]->trigdiff;
        tnum++;
    }
    t0=tsum0/tnum;
    t=tsum/tnum;

    bool print=false;
#ifdef VERBOSE
    print=true;
#else
    for (int i=0; i<ems_data.nr_is; i++) {
        struct is_info *is_info;
        is_info=static_cast<struct is_info*>(ems_data.fifo[i].private_ptr);
        if (ems_data.fifo[i].ignore||!is_info->is_lvd)
            continue;
        double diff;
        diff=ems_data.fifo[i][0]->trigdiff-t;
        if (fabs(diff)>10.)
            print=true;
    }
#endif
    if (print) {
        fprintf(stderr, "%6d ", statist.events);
        for (int i=0; i<ems_data.nr_is; i++) {
            struct is_info *is_info;
            is_info=static_cast<struct is_info*>(ems_data.fifo[i].private_ptr);
            if (ems_data.fifo[i].ignore||!is_info->is_lvd)
                continue;
            fprintf(stderr, " %10.2f", ems_data.fifo[i][0]->trigdiff);
        }
        fprintf(stderr, "\n       ");
    }
    for (int i=0; i<ems_data.nr_is; i++) {
        struct is_info *is_info;
        is_info=static_cast<struct is_info*>(ems_data.fifo[i].private_ptr);
        if (ems_data.fifo[i].ignore||!is_info->is_lvd)
            continue;
        double diff;
        diff=ems_data.fifo[i][0]->trigdiff0-t0;
        if (print) {
            if ((i==idx0)||(i==idx1))
                fprintf(stderr, " [%8.2f]", diff);
            else
                fprintf(stderr, "  %8.2f ", diff);
        }
        if (statist.events>2) {
            is_info->statist.n++;
            is_info->statist.s+=diff/t;
        }
    }
    if (print) {
        fprintf(stderr, "  %f\n       ", t0);
    }
    for (int i=0; i<ems_data.nr_is; i++) {
        struct is_info *is_info;
        is_info=static_cast<struct is_info*>(ems_data.fifo[i].private_ptr);
        if (ems_data.fifo[i].ignore||!is_info->is_lvd)
            continue;
        double diff;
        diff=ems_data.fifo[i][0]->trigdiff-t;
        if (print) {
            if ((i==idx0)||(i==idx1))
                fprintf(stderr, " [%8.2f]", diff);
            else
                fprintf(stderr, "  %8.2f ", diff);
        }
    }
    if (print) {
        fprintf(stderr, "  %f\n", t);
    }

    *triggerdiff=t;
    return 0;
}
#undef VERBOSE
//---------------------------------------------------------------------------//
    // try to improve td by deleting one or more subevents
    int improved;
    do {
        improved=false;
        for (int i=0; i<num; i++)
            remove_sev[i]=false;
        for (int i=0; i<num; i++) {
            double dd=0.;
            for (int j=0; j<num; j++) {
                int idx=indices[j];
                if (i==j) {
                    dd+=fabs(sev_tdiff(ems_data.fifo[idx], 1)-t);
                } else {
                    dd+=fabs(ems_data.fifo[idx][0]->trigdiff-t);
                }
            }
            dd/=num;
            if (dd<td) {
                remove_sev[i]=true;
                improved++;
            }
        }
        if (improved==num) // we should not remove all subevents
            improved=0;
        if (improved>0) {
            // remove marked subevents
            for (int i=0; i<num; i++) {
                if (remove_sev[i]) {
                    int idx=indices[i];
                    cerr<<"removed sev from IS "<<ems_data.fifo[idx].is_id<<endl;
                    ems_data.fifo[indices[i]].remove();
                }
            }
dump_times();
            // recalculate t
            t=0.;
            for (int i=0; i<num; i++) {
                t+=ems_data.fifo[indices[i]][0]->trigdiff;
            }
            t/=num;
            // recalculate average deviation from t
            td=0;
            for (int i=0; i<num; i++) {
                int idx=indices[i];
                td+=fabs(ems_data.fifo[idx][0]->trigdiff-t);
            }
            td/=num;
        }
    } while (improved);
//---------------------------------------------------------------------------//
