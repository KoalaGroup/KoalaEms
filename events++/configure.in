dnl $Id: configure.in,v 1.24 2006/12/12 19:12:52 wuestner Exp $
dnl Process this file with autoconf to produce a configure script.
dnl $ems/events++
AC_INIT(tapedup.cc)
AC_CONFIG_AUX_DIR(../confsupp)

lems=/usr/local/ems
AC_PREFIX_DEFAULT(/usr/local/ems)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_RANLIB
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_CANONICAL_SYSTEM

. $srcdir/patchlevel

AC_ARG_ENABLE(debug, [  --enable-debug ])
dnl Set compilation flags
if test "$GXX" = yes ; then
    CXX_ANSI=1
    CXXFLAGS="-D__STD_STRICT_ANSI -ansi -Wall -Woverloaded-virtual"
    if test "$enable_debug" = yes ; then
        CXXFLAGS="$CXXFLAGS -g"
    else
        CXXFLAGS="$CXXFLAGS -O2"
    fi
    WERROR="-Werror"
    case $build_os in
        linux*)
            CPPFLAGS="-D_BSD_SOURCE"
        ;;
    esac
else
  WERROR=""
  case $build_os in
    ultrix*)
      if test "$enable_debug" = yes ; then
        CXXFLAGS="-g"
      else
        CXXFLAGS="-O2"
      fi
    ;;
    osf*)
      CXXFLAGS=""
      AC_MSG_CHECKING(for cxx version)
      AC_LANG_CPLUSPLUS
      AC_TRY_RUN([
        main()
          {
          int x;
          #ifdef __DECCXX_VER
            if (__DECCXX_VER>=60000000)
              x=0;
            else
              x=1;
          #else
          x=2;
          #endif
          exit(x);
          }
        ],
        cxxver=new,
        cxxver=old,
        cxxver=none
      )
      case $cxxver in
        new)
          AC_MSG_RESULT(6 or newer)
          CXXFLAGS="$CXXFLAGS -use_ld_input -std strict_ansi -pch"
          CXX_ANSI=1
          for i in CLIENTLIBVER SUPPORTVER PROCLIBVER ; do
            eval $i=`echo \`eval echo \\\\$\$i\`|sed 's/\./a\./'`
          done
        ;;
        old)
          AC_MSG_RESULT(5 or older)
        ;;
        none)
          AC_MSG_RESULT(unknown)
        ;;
      esac
      CXXLIB="-lcxx"
      if test "$enable_debug" = yes ; then
        CXXFLAGS="$CXXFLAGS -v -g"
      else
        CXXFLAGS="$CXXFLAGS -v -O2"
      fi
    ;;
  esac
fi

case $target_os in
linux*)
    CXXFLAGS="$CXXFLAGS -DLINUX_CLIENT"
    case $target_cpu in
    i*86)
        tsmdir=/opt/tivoli/tsm/client
        apidir=$tsmdir/api/bin
        apilib=ApiDS
        badir=$tsmdir/ba/bin
    ;;
    x86_64)
        tsmdir=/opt/tivoli/tsm/client
        apidir=$tsmdir/api/bin64
        apilib=ApiTSM64
        badir=$tsmdir/ba/bin64
    ;;
    esac
;;
osf*)
    dnl CXXFLAGS="$CXXFLAGS -std1"
    tsmdir=/usr/tivoli/tsm/client
    apidir=$tsmdir/api/bin
    apilib=ApiDS
    badir=$tsmdir/ba/bin
;;
esac

echo apidir is $apidir

AC_SUBST(CXXFLAGS)
AC_SUBST(apidir)
AC_SUBST(apilib)
AC_SUBST(badir)

dnl Check for shared objects

LDFLAGS=""
LIBSUFFIX=".a"

AC_MSG_CHECKING(whether we should use shared objects)
AC_ARG_ENABLE(dynamic, [  --disable-dynamic  don't use shared objects])
makeshared=false
case $target_os in
  _linux*)
    if test "$enable_dynamic" != yes ; then
      dynamic=true
    else
      LDFLAGS=-static
    fi
  ;;
  x_NetBSD-*|FreeBSD-*)
    # Not available on all versions:  check for include file.
    if test -e /usr/include/dlfcn.h; then
      dynamic=true
    fi
    ;;
  x_osf*)
    if test "$GXX" = yes ; then
      makeshared=false
      LDFLAGS=-static
    else
      if test "$enable_dynamic" = no ; then
        LDFLAGS=-non_shared
      else
        LDFLAGS="-error_unresolved -non_shared"
        LIBSUFFIX=.so
        makeshared=true
      fi
    fi
    ;;
esac
if test "$makeshared" = true ; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi 

AC_SUBST(LDFLAGS)
AC_SUBST(LIBSUFFIX)
AC_SUBST(COMMONVER)
AC_SUBST(SUPPORTVER)

dnl required packages:
dnl ems_common ?
dnl ems-support
dnl

EMS_SEARCH_COMMON
EMS_SEARCH_COMMONLIB(.$COMMONVER$LIBSUFFIX)
AC_SUBST(EMSCOMMON)
AC_SUBST(EMSEXCOMMON)
AC_SUBST(EMSCOMMONLIB)

EMS_SEARCH_SUPPORT
EMS_SEARCH_SUPPORTLIB(.$SUPPORTVER$LIBSUFFIX)
AC_SUBST(EMSSUPPORT)
AC_SUBST(EMSSUPPORTLIB)

AC_LANG_CPLUSPLUS


AC_CHECK_HEADERS(sys/cdefs.h)
AC_CHECK_HEADERS(String.h)
AC_CHECK_HEADERS(string)

AC_MSG_CHECKING(whether we can use namespaces)
SAVED_CXXFLAGS=$CXXFLAGS
CXXFLAGS="$CXXFLAGS $WERROR"
AC_CACHE_VAL(ems_cv_namespaces,
AC_TRY_COMPILE([
#if defined (__STD_STRICT_ANSI) || defined (__STRICT_ANSI__)
#include <iostream>
#else
#include <iostream.h>
#endif
namespace xxx {
int i;
}
using namespace std;
], [
xxx::i=13;
],
ems_cv_namespaces=yes,
ems_cv_namespaces=no))
AC_MSG_RESULT($ems_cv_namespaces)
if test $ems_cv_namespaces = yes ; then
    AC_DEFINE(HAVE_NAMESPACES)
fi
CXXFLAGS=$SAVED_CXXFLAGS

# AC_CHECK_HEADERS(aio.h)
# if test "$ac_cv_header_aio_h" = "yes" ; then
#   AIOSRC='$(AIOSRC)'
#   AIOLIB='$(AIOLIB)'
#   AC_DEFINE(USE_AIO)
# fi
AC_SUBST(AIOSRC)
AC_SUBST(AIOLIB)

AC_MSG_CHECKING([whether bool is defined])
AC_CACHE_VAL(ems_cv_header_bool_def,
AC_TRY_COMPILE([], [
bool b;
b=true;
], ems_cv_header_bool_def=yes, ems_cv_header_bool_def=no))
AC_MSG_RESULT($ems_cv_header_bool_def)
if test $ems_cv_header_bool_def = no ; then
	AC_DEFINE(NEED_BOOL)
fi

if test "$ems_cv_namespaces" = yes ; then
  AC_MSG_CHECKING([whether std::bad_alloc is defined])
  AC_CACHE_VAL(ems_cv_header_bad_alloc_def,
  AC_TRY_COMPILE([
  #include <sys/types.h>
  using namespace std;
  std::bad_alloc x;
  ], [
  ], ems_cv_header_bad_alloc_def=yes, ems_cv_header_bad_alloc_def=no))
  AC_MSG_RESULT($ems_cv_header_bad_alloc_def)
  if test $ems_cv_header_bad_alloc_def = yes ; then
    AC_DEFINE(HAVE_BAD_ALLOC)
  fi
else
  ems_cv_header_bad_alloc_def=no
fi

if test $ems_cv_header_bad_alloc_def = yes ; then
  AC_MSG_CHECKING([whether operator new is accepted])
  AC_CACHE_VAL(ems_cv_header_op_new_def,
  AC_TRY_COMPILE([
  #include <sys/types.h>
  using namespace std;
  void* operator new(size_t s) throw(std::bad_alloc);
  ], [
  ], ems_cv_header_op_new_def=yes, ems_cv_header_op_new_def=no))
  AC_MSG_RESULT($ems_cv_header_op_new_def)
  if test $ems_cv_header_op_new_def = yes ; then
    AC_DEFINE(HAVE_OP_NEW)
  fi

  AC_MSG_CHECKING([whether operator new[[]] is accepted])
  AC_CACHE_VAL(ems_cv_header_op_new_arr_def,
  AC_TRY_COMPILE([
  #include <sys/types.h>
  using namespace std;
  void* operator new[[]](size_t s) throw(std::bad_alloc);
  ], [
  ], ems_cv_header_op_new_arr_def=yes, ems_cv_header_op_new_arr_def=no))
  AC_MSG_RESULT($ems_cv_header_op_new_arr_def)
  if test $ems_cv_header_op_new_arr_def = yes ; then
    AC_DEFINE(HAVE_OP_NEW_ARR)
  fi
else
  AC_MSG_CHECKING([whether operator new is accepted])
  AC_CACHE_VAL(ems_cv_header_op_new_def,
  AC_TRY_COMPILE([
  #include <sys/types.h>
  void* operator new(size_t s);
  ], [
  ], ems_cv_header_op_new_def=yes, ems_cv_header_op_new_def=no))
  AC_MSG_RESULT($ems_cv_header_op_new_def)
  if test $ems_cv_header_op_new_def = yes ; then
	  AC_DEFINE(HAVE_OP_NEW)
  fi

  AC_MSG_CHECKING([whether operator new[[]] is accepted])
  AC_CACHE_VAL(ems_cv_header_op_new_arr_def,
  AC_TRY_COMPILE([
  #include <sys/types.h>
  void* operator new[[]](size_t s);
  ], [
  ], ems_cv_header_op_new_arr_def=yes, ems_cv_header_op_new_arr_def=no))
  AC_MSG_RESULT($ems_cv_header_op_new_arr_def)
  if test $ems_cv_header_op_new_arr_def = yes ; then
    AC_DEFINE(HAVE_OP_NEW_ARR)
  fi
fi

dnl Checks for ntohl()
AC_MSG_CHECKING([whether ntohl() is properly defined])
AC_CACHE_VAL(ems_cv_header_ntohl_def,
AC_TRY_COMPILE([
#include <sys/types.h>
#include <netinet/in.h>
], [
unsigned int res;
res=ntohl(17);
],
ems_cv_header_ntohl_def=yes,
ems_cv_header_ntohl_def=no))
AC_MSG_RESULT($ems_cv_header_ntohl_def)
if test $ems_cv_header_ntohl_def = no ; then
	AC_DEFINE(NEED_NTOHLDEF)
fi

AC_MSG_CHECKING([whether sa_handler accepts int])
AC_CACHE_VAL(ems_cv_header_sa_handler_int,
AC_TRY_COMPILE([#include <signal.h>], [
void (*handler)(int);
struct sigaction vec;
vec.sa_handler=handler;
], ems_cv_header_sa_handler_int=yes, ems_cv_header_sa_handler_int=no))
AC_MSG_RESULT($ems_cv_header_sa_handler_int)
if test $ems_cv_header_sa_handler_int = no ; then
	AC_DEFINE(SA_HANDLER_VOID)
fi

AC_MSG_CHECKING([whether sigpause() is defined])
AC_CACHE_VAL(ems_cv_header_sigpause_def,
AC_EGREP_CPP(sigpause, [#include <sys/signal.h>],
ems_cv_header_sigpause_def=yes,
ems_cv_header_sigpause_def=no))
AC_MSG_RESULT($ems_cv_header_sigpause_def)
if test $ems_cv_header_sigpause_def = no ; then
	AC_DEFINE(NEED_SIGPAUSEDEF)
fi

AC_MSG_CHECKING([whether gettimeofday() is defined])
AC_CACHE_VAL(ems_cv_header_gettimeofday_def,
	AC_EGREP_CPP(gettimeofday, [#include <sys/time.h>],
	ems_cv_header_gettimeofday_def=yes, 
	ems_cv_header_gettimeofday_def=no))
AC_MSG_RESULT($ems_cv_header_gettimeofday_def)
if test $ems_cv_header_gettimeofday_def = no ; then
	AC_DEFINE(NEED_GETTIMEOFDAYDEF)
fi

AC_MSG_CHECKING([whether random() is defined])
AC_CACHE_VAL(ems_cv_header_random_def,
	AC_EGREP_CPP(random, [#include <stdlib.h>],
	ems_cv_header_random_def=yes, 
	ems_cv_header_random_def=no))
AC_MSG_RESULT($ems_cv_header_random_def)
if test $ems_cv_header_random_def = no ; then
	AC_DEFINE(NEED_RANDOMDEF)
fi

AC_MSG_CHECKING([whether ioctl() is defined])
AC_CACHE_VAL(ems_cv_header_ioctl_def,
AC_TRY_COMPILE([#include <sys/ioctl.h>], [
ioctl(0, 0, (char*)0);
], ems_cv_header_ioctl_def=yes, ems_cv_header_ioctl_def=no))
AC_MSG_RESULT($ems_cv_header_ioctl_def)
if test $ems_cv_header_ioctl_def = no ; then
	AC_DEFINE(NEED_IOCTLDEF)
fi

AC_MSG_CHECKING([whether socklen_t is defined])
AC_CACHE_VAL(ems_cv_header_socklen_t_def,
AC_TRY_COMPILE([#define _XOPEN_SOURCE 500
#include <sys/socket.h>], [
socklen_t len;
len++;
], ems_cv_header_socklen_t_def=yes, ems_cv_header_socklen_t_def=no))
AC_MSG_RESULT($ems_cv_header_socklen_t_def)
if test $ems_cv_header_socklen_t_def = no ; then
	AC_DEFINE(NEED_SOCKLEN_TDEF)
fi

AC_CONFIG_HEADER(config.h)
AC_OUTPUT(Makefile)
