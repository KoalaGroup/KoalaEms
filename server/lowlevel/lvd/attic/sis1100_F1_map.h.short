
struct cm_regs {
    u_int32_t   version;
    u_int32_t   sr;                     /* Status Register */
    u_int32_t   cr;                     /* Control Register, 4 bit */
    u_int32_t   res1;
    u_int32_t   jtag_csr;               /* JTAG control/status */
    u_int32_t   jtag_data;              /* JTAG data */
};

/* ========================== BUS Struktur ================================== */

/* -- register einer Eingabekarte */

struct in_card {
    u_int16_t   ident;
    u_int16_t   res0;
    u_int16_t   trg_lat;
    u_int16_t   trg_win;
    u_int16_t   ro_data;
    u_int16_t   f1_addr;
    u_int16_t	cr;             /* 2 bit */
    u_int16_t   sr;
    u_int16_t   f1_state[8];
    u_int16_t   f1_reg[16];
    u_int16_t	jtag_csr;
    u_int16_t   res2;
    u_int32_t   jtag_data;
    u_int16_t   res3[4];
    u_int16_t   res4[16];
    u_int16_t   res5[7];
    u_int16_t   action;
};

/*
 * -- broadcast register der Eingabekarten einer backplane
 */

struct in_card_bc {
    u_int16_t       card_onl;
    u_int16_t       card_offl;
    u_int16_t       trg_lat;
    u_int16_t       trg_win;
    u_int16_t       ro_data;
    u_int16_t       f1_addr;
    u_int16_t       cr;             /* siehe IN_CARD */
    u_int16_t       f1_error;       /* wr: wie IN_CARD->sr */
/*? u_int16_t       f1_state[8]; */
    u_int16_t       event_time;
    u_int16_t       res1[7];
    u_int16_t       f1_reg[16];
    u_int16_t       jtag_csr;
    u_int16_t       res2[7];
    u_int16_t       res3[16];
    u_int16_t       res4[7];
    u_int16_t       reset;          /* Master Reset */
};

/*
 * -- broadcast register der Koppelkarten am 80MB LVD BUS
 *    es gibt keine broadcast read Moeglichkeit ausser card_offl als
 *    Sonderloesung
 */
struct coupler_bc {
    u_int16_t       card_onl;
    u_int16_t       card_offl;
    u_int16_t       transp;
    u_int16_t       res0;
    u_int16_t       res1[2];
    u_int16_t       _ev_req;
    u_int16_t       res2;
    u_int16_t       _ro_req;
    u_int16_t       _f1_busy;
    u_int16_t       _f1_error;
    u_int16_t       res3[5];
    u_int16_t       f1_reg[16];
    u_int16_t       res4[31];
    u_int16_t       reset;  /* alle Koppelkarten und alle Eingabekarten */
};

/*
 * -- register einer Koppelkarte
 */
struct coupler {
    u_int16_t       ident;
    u_int16_t       set_addr;
    u_int16_t       res0;
    u_int16_t       card_id;
    u_int16_t       cr;     /* 4 bit */
    u_int16_t  sr;          /* siehe f1_state Definitionen */
    u_int32_t       event_nr;
    u_int16_t       ro_data;
    u_int16_t       res1;
    u_int32_t       event_data;
    u_int16_t       res2[4];
    u_int16_t       f1_reg[16];
    u_int16_t       jtag_csr;
    u_int16_t       res3;
    u_int32_t       jtag_data;
    u_int16_t       res4[27];
    u_int16_t       action;
};

/*
 *  Adressmapping einer optical Koppelkarte
 */
struct bus1100 {
    struct in_card     in_card[16];   /* eigene Eingabekarten (backplane) */
    struct coupler     coupler[16];   /* angeschlossene Koppelkarten */
    struct in_card     c_in_card[16]; /* Eingabekarten einer sel. Koppelkarte */
    struct coupler     l_coupler;     /* lokale Koppelkarte */
    struct in_card_bc  in_card_bc;    /* broadcast der eigenen Eingabekarten */
    struct coupler_bc  coupler_bc;    /* broadcast der angeschl. Koppelkarten */
    struct in_card_bc  c_in_card_bc;  /* broadcast der Eingabekarten
                                         einer selektierten Koppelkarte */
};
