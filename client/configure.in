dnl $ZEL: configure.in,v 2.16 2004/11/26 14:36:33 wuestner Exp $
dnl Process this file with autoconf to produce a configure script.
dnl $ems/client
AC_INIT(vednames.cc)
AC_CONFIG_AUX_DIR(../confsupp)

lems=/usr/local/ems
AC_PREFIX_DEFAULT(/usr/local/ems)

dnl Checks for programs.
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_RANLIB
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_CANONICAL_SYSTEM

. $srcdir/patchlevel

AC_ARG_ENABLE(debug, [  --enable-debug ])
dnl Set compilation flags
if test "$GXX" = yes ; then
  CXXFLAGS="-ansi"
  if test "$enable_debug" = yes ; then
    CXXFLAGS="$CXXFLAGS -g"
    dnl CXXFLAGS="$CXXFLAGS -g -Wall -Woverloaded-virtual"
  fi
  WERROR="-Werror"
  case $build_os in
    linux*)
      CPPFLAGS="$CPPFLAGS -D_BSD_SOURCE"
      ;;
  esac
else
  WERROR=""
  case $build_os in
    ultrix*)
      if test "$enable_debug" = yes ; then
        CXXFLAGS="-g"
      else
        CXXFLAGS="-O2"
      fi
    ;;
    osf*)
      CXXFLAGS=""
      AC_MSG_CHECKING(for cxx version)
      AC_LANG_SAVE
      AC_LANG_CPLUSPLUS
      AC_TRY_RUN([
        main()
          {
          int x;
          #ifdef __DECCXX_VER
            if (__DECCXX_VER>=60000000)
              x=0;
            else
              x=1;
          #else
          x=2;
          #endif
          exit(x);
          }
        ],
        cxxver=new,
        cxxver=old,
        cxxver=none
      )
      AC_LANG_RESTORE
      case $cxxver in
        new)
          AC_MSG_RESULT(6 or newer)
          CXXFLAGS="$CXXFLAGS -use_ld_input -std strict_ansi -ptr ../cxx_repository -tall -nopure_cname"
          CXX_ANSI=1
          for i in CLIENTLIBVER SUPPORTVER PROCLIBVER ; do
            eval $i=`echo \`eval echo \\\\$\$i\`|sed 's/\./a\./'`
          done
        ;;
        old)
          AC_MSG_RESULT(5 or older)
        ;;
        none)
          AC_MSG_RESULT(unknown)
        ;;
      esac
      CXXLIB="-lcxx"
      if test "$enable_debug" = yes ; then
        CXXFLAGS="$CXXFLAGS -v -g"
      else
        CXXFLAGS="$CXXFLAGS -O2"
      fi
    ;;
  esac
fi
AC_SUBST(CXXFLAGS)

AC_ARG_ENABLE(dynamic, [  --enable-dynamic ])
AC_MSG_CHECKING(whether we should use shared objects)

dynamic=false
if test "$enable_dynamic" = yes; then
  case $target_os in
    x_linux*)
      SHLIBSUFFIX=.so
      dynamic=true
      ;;
    osf*)
      SHLIBSUFFIX=.so
      dynamic=true
      ;;
    *)
      AC_MSG_WARN([dynamic linking? don't know how ...])
      ;;
  esac
else
  case $target_os in
    linux*)
      LDFLAGS="$LDFLAGS -static"
      ;;
    osf*)
      LDFLAGS="$LDFLAGS -non_shared -v"
      ;;
    ultrix*)
      ;;
    *)
      AC_MSG_WARN([dynamic linking? don't know how ...])
      ;;
  esac
fi
if test "$dynamic" = true ; then
  AC_MSG_RESULT(yes)
  LIBSUFFIX=$SHLIBSUFFIX
else
  AC_MSG_RESULT(no)
  LIBSUFFIX=.a
fi

AC_SUBST(LIBSUFFIX)
AC_SUBST(LDFLAGS)
AC_SUBST(COMMONVER)
AC_SUBST(CLIENTLIBVER)
AC_SUBST(SUPPORTVER)
AC_SUBST(PROCLIBVER)

dnl required packages:
dnl ems_common
dnl ems-support
dnl ems-clientlib
dnl proclib
dnl

AC_ARG_WITH(ems-libs, [  --with-ems-libs search first in this directory for ems libraries],
	emslibs=$withval, emslibs="")

EMS_SEARCH_COMMON
EMS_SEARCH_COMMONLIB(.$COMMONVER$LIBSUFFIX)
AC_SUBST(EMSCOMMON)
AC_SUBST(EMSEXCOMMON)
AC_SUBST(EMSCOMMONLIB)

EMS_SEARCH_SUPPORT
EMS_SEARCH_SUPPORTLIB(.$SUPPORTVER$LIBSUFFIX)
AC_SUBST(EMSSUPPORT)
AC_SUBST(EMSSUPPORTLIB)

EMS_SEARCH_CLIENT
EMS_SEARCH_CLIENTLIB(xx.$CLIENTLIBVER$LIBSUFFIX)
AC_SUBST(EMSCLIENT)
AC_SUBST(EMSCLIENTLIB)

EMS_SEARCH_PROC
EMS_SEARCH_PROCLIB(.$PROCLIBVER$LIBSUFFIX)
AC_SUBST(EMSPROC)
AC_SUBST(EMSPROCLIB)

EXTRASOURCES=""
AC_ARG_ENABLE(root, [  --enable-root compile programs using root])
if test "$enable_root" = yes ; then
  EXTRASOURCES="$EXTRASOURCES \$(RSOURCES)"
fi

AC_ARG_ENABLE(hbook, [  --enable-hbook compile programs using hbook])
if test "$enable_hbook" = yes ; then
  EXTRASOURCES="$EXTRASOURCES \$(HSOURCES)"
fi
AC_SUBST(EXTRASOURCES)

AC_LANG_SAVE
AC_LANG_CPLUSPLUS

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/cdefs.h)

AC_CHECK_HEADERS(String.h)
AC_CHECK_HEADERS(string)

AC_MSG_CHECKING(whether we have to use namespaces)
SAVED_CXXFLAGS=$CXXFLAGS
CXXFLAGS="$CXXFLAGS $WERROR"
AC_CACHE_VAL(ems_cv_namespaces,
AC_TRY_COMPILE([
#if defined (__STD_STRICT_ANSI) || defined (__STRICT_ANSI__)
#include <iostream>
#else
#include <iostream.h>
#endif
namespace xxx {
int i;
}
using namespace std;
], [
xxx::i=13;
],
ems_cv_namespaces=yes,
ems_cv_namespaces=no))
AC_MSG_RESULT($ems_cv_namespaces)
if test $ems_cv_namespaces = yes ; then
    AC_DEFINE(HAVE_NAMESPACES)
fi
CXXFLAGS=$SAVED_CXXFLAGS

AC_MSG_CHECKING([whether bool is defined])
AC_CACHE_VAL(ems_cv_header_bool_def,
AC_TRY_COMPILE([], [
bool b;
b=true;
], ems_cv_header_bool_def=yes, ems_cv_header_bool_def=no))
AC_MSG_RESULT($ems_cv_header_bool_def)
if test $ems_cv_header_bool_def = no ; then
	AC_DEFINE(NEED_BOOL)
fi

dnl Checks for ntohl()
AC_MSG_CHECKING([whether ntohl() is properly defined])
AC_CACHE_VAL(ems_cv_header_ntohl_def,
AC_TRY_COMPILE(
  [
  #include <sys/types.h>
  #include <netinet/in.h>
  ] , [
unsigned int res;
res=ntohl(17);
],
ems_cv_header_ntohl_def=yes,
ems_cv_header_ntohl_def=no))
AC_MSG_RESULT($ems_cv_header_ntohl_def)
if test $ems_cv_header_ntohl_def = no ; then
	AC_DEFINE(NEED_NTOHLDEF)
fi
#AC_LANG_RESTORE

AC_MSG_CHECKING([whether sa_handler accepts int])
AC_CACHE_VAL(ems_cv_header_sa_handler_int,
AC_TRY_COMPILE([#include <signal.h>], [
void (*handler)(int);
struct sigaction vec;
vec.sa_handler=handler;
], ems_cv_header_sa_handler_int=yes, ems_cv_header_sa_handler_int=no))
AC_MSG_RESULT($ems_cv_header_sa_handler_int)
if test $ems_cv_header_sa_handler_int = no ; then
	AC_DEFINE(SA_HANDLER_VOID)
fi

#AC_LANG_CPLUSPLUS
AC_MSG_CHECKING([whether sigpause() is defined])
AC_CACHE_VAL(ems_cv_header_sigpause_def,
AC_EGREP_CPP(sigpause, [#include <sys/signal.h>],
ems_cv_header_sigpause_def=yes,
ems_cv_header_sigpause_def=no))
AC_MSG_RESULT($ems_cv_header_sigpause_def)
if test $ems_cv_header_sigpause_def = no ; then
	AC_DEFINE(NEED_SIGPAUSEDEF)
fi

AC_MSG_CHECKING([whether gettimeofday() is defined])
AC_CACHE_VAL(ems_cv_header_gettimeofday_def,
	AC_EGREP_CPP(gettimeofday, [#include <sys/time.h>],
	ems_cv_header_gettimeofday_def=yes, 
	ems_cv_header_gettimeofday_def=no))
AC_MSG_RESULT($ems_cv_header_gettimeofday_def)
if test $ems_cv_header_gettimeofday_def = no ; then
	AC_DEFINE(NEED_GETTIMEOFDAYDEF)
fi

AC_MSG_CHECKING([whether random() is defined])
AC_CACHE_VAL(ems_cv_header_random_def,
	AC_EGREP_CPP(random, [#include <stdlib.h>],
	ems_cv_header_random_def=yes, 
	ems_cv_header_random_def=no))
AC_MSG_RESULT($ems_cv_header_random_def)
if test $ems_cv_header_random_def = no ; then
	AC_DEFINE(NEED_RANDOMDEF)
fi

AC_MSG_CHECKING([whether ioctl() is defined])
AC_CACHE_VAL(ems_cv_header_ioctl_def,
AC_TRY_COMPILE([#include <sys/ioctl.h>], [
ioctl(0, 0, (char*)0);
], ems_cv_header_ioctl_def=yes, ems_cv_header_ioctl_def=no))
AC_MSG_RESULT($ems_cv_header_ioctl_def)
if test $ems_cv_header_ioctl_def = no ; then
	AC_DEFINE(NEED_IOCTLDEF)
fi

AC_CONFIG_HEADER(config.h)
AC_OUTPUT(Makefile)
