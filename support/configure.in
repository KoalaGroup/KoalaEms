dnl $ZEL: configure.in,v 2.32 2010/10/13 14:16:42 wuestner Exp $
dnl Process this file with autoconf to produce a configure script.
dnl $ems/support
AC_INIT(readargs.cc)
AC_CONFIG_AUX_DIR($srcdir/../confsupp)

lems=/usr/local/ems
AC_PREFIX_DEFAULT(/usr/local/ems)

dnl Checks for programs.
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_RANLIB
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_CANONICAL_SYSTEM

. $srcdir/patchlevel

AC_ARG_ENABLE(debug, [  --enable-debug ])
dnl Set compilation flags
CXX_ANSI=0
if test "$GXX" = yes ; then
    CXXFLAGS="-D__STD_STRICT_ANSI -ansi"
    CXXFLAGS="$CXXFLAGS -Wall -Woverloaded-virtual"
    CXXFLAGS="$CXXFLAGS -Wold-style-cast -Wmissing-declarations"
    if test "$enable_debug" = yes ; then
        CXXFLAGS="$CXXFLAGS -g"
    else
        CXXFLAGS="$CXXFLAGS -O2"
    fi
    WERROR="-Werror"
    case $build_os in
        linux*)
        CPPFLAGS="-D_BSD_SOURCE"
    ;;
    esac
else
  WERROR=""
  case $build_os in
    ultrix*)
      if test "$enable_debug" = yes ; then
        CXXFLAGS="-g"
      else
        CXXFLAGS="-O2"
      fi
    ;;
    osf*)
      CXXFLAGS=""
      AC_MSG_CHECKING(for cxx version)
      AC_LANG_CPLUSPLUS
      AC_TRY_RUN([
        main()
          {
          int x;
          #ifdef __DECCXX_VER
            if (__DECCXX_VER>=60000000)
              x=0;
            else
              x=1;
          #else
            x=2;
          #endif
          exit(x);
          }
        ],
        cxxver=new,
        cxxver=old,
        cxxver=none
      )
      case $cxxver in
        new)
          AC_MSG_RESULT(6 or newer)
          CXXFLAGS="$CXXFLAGS -use_ld_input -std strict_ansi -ptr ../cxx_repository -tall -nopure_cname"
          CXX_ANSI=1
          for i in SELFVER ; do
            eval $i=`echo \`eval echo \\\\$\$i\`|sed 's/\./a\./'`
          done
        ;;
        old)
          AC_MSG_RESULT(5 or older)
          CXXFLAGS="$CXXFLAGS -ptr ../cxx_repository"
        ;;
        none)
          AC_MSG_RESULT(unknown)
        ;;
      esac
      if test "$enable_debug" = yes ; then
        CXXFLAGS="$CXXFLAGS -g"
      else
        CXXFLAGS="$CXXFLAGS -O2"
      fi
    ;;
  esac
fi
AC_SUBST(CXXFLAGS)

dnl Check for shared objects
AC_MSG_CHECKING(whether we should create shared objects)
if test "$GXX" = yes ; then
  case $target_os in
    *)
      makeshared=false
    ;;
  esac
else
  case $target_os in
    x_netbsd*)
      LDOFLAGS='-shared'
      NONECOMMON=""
      NONESUPP=""
      SHLIBSUFFIX=.so
      makeshared=true
    ;;
    x_linux*)
      LDOFLAGS='-shared --whole-archive -rpath $(LIB_DIR) -t'
      LDONONEFLAG="--no-whole-archive"
      SHLIBSUFFIX=.so
      makeshared=true
    ;;
    x_osf*)
      LDOFLAGS='-shared -rpath $(LIB_DIR)'
      LDOFLAGS=$LDOFLAGS' -set_version $(SELFVER)'
      LDOFLAGS=$LDOFLAGS' -error_unresolved'
      LDONONEFLAG="-none"
      NONECOMMON="$(NONECOMMON)"
      NONESUPP="$(NONESUPP)"
      SHLIBSUFFIX=.so
      makeshared=true
    ;;
    *)
      makeshared=false
    ;;
  esac
fi
if test $makeshared = true ; then
  AC_MSG_RESULT(yes)
  SLIBS='$(slibs)'
  LIBSUFFIX=$SHLIBSUFFIX
else
  AC_MSG_RESULT(no)
  LIBSUFFIX=.a
fi
AC_SUBST(SLIBS)
AC_SUBST(LDOFLAGS)
AC_SUBST(LDONONEFLAG)
AC_SUBST(SHLIBSUFFIX)
AC_SUBST(COMMONVER)
AC_SUBST(SELFVER)
AC_SUBST(NONECOMMON)
AC_SUBST(NONESUPP)

if test $CXX_ANSI = 1 ; then
  ASRC='$(ASRC)'
fi
AC_SUBST(ASRC)

AC_ARG_WITH(ems-libs, [  --with-ems-libs search first in this directory for ems libraries],
	emslibs=$withval, emslibs="")

EMS_SEARCH_COMMON
EMS_SEARCH_COMMONLIB(.$COMMONVER$LIBSUFFIX)

AC_SUBST(EMSCOMMON)
AC_SUBST(EMSEXCOMMON)
AC_SUBST(EMSCOMMONLIB)

AC_LANG_SAVE
AC_LANG_CPLUSPLUS

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/cdefs.h strings.h)

dnl AC_CHECK_HEADERS(String.h)
AC_CHECK_HEADERS(string)

AC_MSG_CHECKING(whether we have to use namespaces)
SAVED_CXXFLAGS=$CXXFLAGS
CXXFLAGS="$CXXFLAGS $WERROR"
AC_CACHE_VAL(ems_cv_namespaces,
AC_TRY_COMPILE([
#if defined (__STD_STRICT_ANSI) || defined (__STRICT_ANSI__)
#include <iostream>
#else
#include <iostream.h>
#endif
namespace xxx {
int i;
}
using namespace std;
], [
xxx::i=13;
],
ems_cv_namespaces=yes,
ems_cv_namespaces=no))
AC_MSG_RESULT($ems_cv_namespaces)
if test $ems_cv_namespaces = yes ; then
    AC_DEFINE(HAVE_NAMESPACES)
fi
CXXFLAGS=$SAVED_CXXFLAGS

AC_MSG_CHECKING([whether socket() is defined])
AC_CACHE_VAL(ems_cv_header_socket_def,
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
], [
int s;
s=socket(0, 0, 0);
],
ems_cv_header_socket_def=yes,
ems_cv_header_socket_def=no))
AC_MSG_RESULT($ems_cv_header_socket_def)
if test $ems_cv_header_socket_def = no ; then
    AC_DEFINE(NEED_SOCKETDEF)
fi

AC_MSG_CHECKING([whether connect() is defined])
AC_CACHE_VAL(ems_cv_header_connect_def,
AC_EGREP_CPP(connect, [
dnl #include <sys/connect.h>
#include <sys/socket.h>
],
ems_cv_header_connect_def=yes,
ems_cv_header_connect_def=no))
AC_MSG_RESULT($ems_cv_header_connect_def)
if test $ems_cv_header_connect_def = no ; then
    AC_DEFINE(NEED_CONNECTDEF)
fi

AC_MSG_CHECKING([whether listen() is defined])
AC_CACHE_VAL(ems_cv_header_listen_def,
AC_EGREP_CPP(listen, [#include <sys/socket.h>],
ems_cv_header_listen_def=yes,
ems_cv_header_listen_def=no))
AC_MSG_RESULT($ems_cv_header_listen_def)
if test $ems_cv_header_listen_def = no ; then
    AC_DEFINE(NEED_LISTENDEF)
fi

AC_MSG_CHECKING([whether setsockopt() is defined])
AC_CACHE_VAL(ems_cv_header_setsockopt_def,
AC_EGREP_CPP(setsockopt, [#include <sys/socket.h>],
ems_cv_header_setsockopt_def=yes,
ems_cv_header_setsockopt_def=no))
AC_MSG_RESULT($ems_cv_header_setsockopt_def)
if test $ems_cv_header_setsockopt_def = no ; then
    AC_DEFINE(NEED_SETSOCKOPTDEF)
fi

AC_MSG_CHECKING([whether bzero() is defined])
AC_CACHE_VAL(ems_cv_header_bzero_def,
AC_EGREP_CPP(bzero, [#include <string.h>],
ems_cv_header_bzero_def=yes,
ems_cv_header_bzero_def=no))
AC_MSG_RESULT($ems_cv_header_bzero_def)
if test $ems_cv_header_bzero_def = no ; then
	AC_DEFINE(NEED_BZERODEF)
fi

AC_MSG_CHECKING([whether ntohl() is properly defined])
AC_CACHE_VAL(ems_cv_header_ntohl_def,
AC_TRY_COMPILE([#include <sys/types.h>
#include <netinet/in.h>], [
unsigned int res;
res=ntohl(17);
], ems_cv_header_ntohl_def=yes, ems_cv_header_ntohl_def=no))
AC_MSG_RESULT($ems_cv_header_ntohl_def)
if test $ems_cv_header_ntohl_def = no ; then
	AC_DEFINE(NEED_NTOHLDEF)
fi

AC_MSG_CHECKING([whether accept() is defined])
AC_CACHE_VAL(ems_cv_header_accept_def,
AC_EGREP_CPP(accept, [#include <sys/socket.h>],
ems_cv_header_accept_def=yes,
ems_cv_header_accept_def=no))
AC_MSG_RESULT($ems_cv_header_accept_def)
if test $ems_cv_header_accept_def = no ; then
	AC_DEFINE(NEED_ACCEPTDEF)
fi

AC_MSG_CHECKING([whether bind() is defined])
AC_CACHE_VAL(ems_cv_header_bind_def,
AC_EGREP_CPP(bind, [#include <sys/socket.h>],
ems_cv_header_bind_def=yes,
ems_cv_header_bind_def=no))
AC_MSG_RESULT($ems_cv_header_bind_def)
if test $ems_cv_header_bind_def = no ; then
	AC_DEFINE(NEED_BINDDEF)
fi

AC_MSG_CHECKING([whether gettimeofday() is defined])
AC_CACHE_VAL(ems_cv_header_gettimeofday_def,
AC_EGREP_CPP(gettimeofday, [#include <sys/time.h>],
ems_cv_header_gettimeofday_def=yes,
ems_cv_header_gettimeofday_def=no))
AC_MSG_RESULT($ems_cv_header_gettimeofday_def)
if test $ems_cv_header_gettimeofday_def = no ; then
	AC_DEFINE(NEED_GETTIMEOFDAYDEF)
fi

AC_MSG_CHECKING([whether getrusage() is defined])
AC_CACHE_VAL(ems_cv_header_getrusage_def,
AC_EGREP_CPP(getrusage, [#include <sys/resource.h>],
ems_cv_header_getrusage_def=yes,
ems_cv_header_getrusage_def=no))
AC_MSG_RESULT($ems_cv_header_getrusage_def)
if test $ems_cv_header_getrusage_def = no ; then
	AC_DEFINE(NEED_GETRUSAGEDEF)
fi

AC_MSG_CHECKING([whether strcasecmp() is defined])
AC_CACHE_VAL(ems_cv_header_strcasecmp_def,
AC_EGREP_CPP(strcasecmp, [#include <strings.h>],
ems_cv_header_strcasecmp_def=yes,
ems_cv_header_strcasecmp_def=no))
AC_MSG_RESULT($ems_cv_header_strcasecmp_def)
if test $ems_cv_header_strcasecmp_def = no ; then
	AC_DEFINE(NEED_STRCASECMP)
fi

AC_MSG_CHECKING([whether trunc() is defined])
AC_CACHE_VAL(ems_cv_header_trunc_def,
AC_EGREP_CPP(trunc, [#include <math.h>],
ems_cv_header_trunc_def=yes,
ems_cv_header_trunc_def=no))
AC_MSG_RESULT($ems_cv_header_trunc_def)
if test $ems_cv_header_trunc_def = no ; then
	AC_DEFINE(NEED_TRUNCDEF)
fi

AC_MSG_CHECKING([whether bool is defined])
AC_CACHE_VAL(ems_cv_header_bool_def,
AC_TRY_COMPILE([], [
bool b;
b=true;
], ems_cv_header_bool_def=yes, ems_cv_header_bool_def=no))
AC_MSG_RESULT($ems_cv_header_bool_def)
if test $ems_cv_header_bool_def = no ; then
	AC_DEFINE(NEED_BOOL)
fi

AC_MSG_CHECKING([whether typeid() works])
AC_CACHE_VAL(ems_cv_header_typeid_def,
AC_TRY_COMPILE([
#include <typeinfo>
], [
const char* s;
const std::type_info& t=typeid(s);
s=t.name();
],
ems_cv_header_typeid_def=yes,
ems_cv_header_typeid_def=no))
AC_MSG_RESULT($ems_cv_header_typeid_def)
if test $ems_cv_header_typeid_def = yes ; then
    AC_DEFINE(HAVE_TYPEINFO)
fi

SOCKLEN_TYPE=""
AC_MSG_CHECKING([3rd argument of accept is socklen_t*])
AC_CACHE_VAL(ems_cv_header_socklen_type_socklen_t,
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
], [
int res;
int sock;
struct sockaddr *address;
socklen_t len=0;
res=accept(sock, address, &len);
],
ems_cv_header_socklen_type_socklen_t=yes,
ems_cv_header_socklen_type_socklen_t=no))
AC_MSG_RESULT($ems_cv_header_socklen_type_socklen_t)
if test $ems_cv_header_socklen_type_socklen_t = yes ; then
    SOCKLEN_TYPE=socklen_t
fi

if test "$SOCKLEN_TYPE" = "" ; then
  AC_MSG_CHECKING([3rd argument of accept is size_t*])
  AC_CACHE_VAL(ems_cv_header_socklen_type_size_t,
  AC_TRY_COMPILE([
  #include <sys/types.h>
  #include <sys/socket.h>
  ], [
  int res;
  int sock;
  struct sockaddr *address;
  size_t len=0;
  res=accept(sock, address, &len);
  ],
  ems_cv_header_socklen_type_size_t=yes,
  ems_cv_header_socklen_type_size_t=no))
  AC_MSG_RESULT($ems_cv_header_socklen_type_size_t)
  if test $ems_cv_header_socklen_type_size_t = yes ; then
      SOCKLEN_TYPE=size_t
  fi
fi

if test "$SOCKLEN_TYPE" = "" ; then
  AC_MSG_CHECKING([3rd argument of accept is int*])
  AC_CACHE_VAL(ems_cv_header_socklen_type_int,
  AC_TRY_COMPILE([
  #include <sys/types.h>
  #include <sys/socket.h>
  ], [
  int res;
  int sock;
  struct sockaddr *address;
  int len=0;
  res=accept(sock, address, &len);
  ],
  ems_cv_header_socklen_type_int=yes,
  ems_cv_header_socklen_type_int=no))
  AC_MSG_RESULT($ems_cv_header_socklen_type_int)
  if test $ems_cv_header_socklen_type_int = yes ; then
      SOCKLEN_TYPE=int
  fi
fi
if test "$SOCKLEN_TYPE" = "" ; then
  AC_MSG_ERROR(cannot determine type of 3rd argument of accept)
fi
AC_SUBST(SOCKLEN_TYPE)

dnl Checks for library functions.
dnl AC_CHECK_FUNCS(gettimeofday socket strerror)

AC_LANG_RESTORE

AC_CONFIG_HEADER(config.h)
AC_OUTPUT(Makefile config_types.h)
