dnl Process this file with autoconf to produce a configure script.
dnl $ems/proclib
AC_INIT(proc_ved.cc)
AC_CONFIG_AUX_DIR($srcdir/../confsupp)

lems=/usr/local/ems
AC_PREFIX_DEFAULT(/usr/local/ems)

dnl Checks for programs.
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_RANLIB
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_CANONICAL_SYSTEM

dnl patchlevel defines COMMONVER CLIENTLIBVER SUPPORTVER and SELFVER
. $srcdir/patchlevel

AC_ARG_ENABLE(debug, [  --enable-debug ])
dnl Set compilation flags
CXX_ANSI=0
if test "$GXX" = yes ; then
    CXXFLAGS="-D__STD_STRICT_ANSI -ansi"
    CXXFLAGS="$CXXFLAGS -Wall -Woverloaded-virtual"
    if test "$enable_debug" = yes ; then
        CXXFLAGS="$CXXFLAGS -g"
    else
        CXXFLAGS="$CXXFLAGS -O2"
    fi
    WERROR="-Werror"
    case $build_os in
        linux*)
            CPPFLAGS="-D_BSD_SOURCE"
        ;;
    esac
else
  WERROR=""
  case $build_os in
    ultrix*)
      if test "$enable_debug" = yes ; then
        CXXFLAGS="-g"
      else
        CXXFLAGS="-O1"
      fi
    ;;
    osf*)
      CXXFLAGS=""
      AC_MSG_CHECKING(for cxx version)
      AC_LANG_CPLUSPLUS
      AC_TRY_RUN([
        main()
          {
          int x;
          #ifdef __DECCXX_VER
            if (__DECCXX_VER>=60000000)
              x=0;
            else
              x=1;
          #else
          x=2;
          #endif
          exit(x);
          }
        ],
        cxxver=new,
        cxxver=old,
        cxxver=none
      )
      case $cxxver in
        new)
          AC_MSG_RESULT(6 or newer)
          CXXFLAGS="$CXXFLAGS -use_ld_input -std strict_ansi -ptr ../cxx_repository -tall -nopure_cname"
          CXX_ANSI=1
          for i in CLIENTLIBVER SUPPORTVER SELFVER ; do
            eval $i=`echo \`eval echo \\\\$\$i\`|sed 's/\./a\./'`
          done
        ;;
        old)
          AC_MSG_RESULT(5 or older)
        ;;
        none)
          AC_MSG_RESULT(unknown)
        ;;
      esac
      CXXLIB="-lcxx"
      if test "$enable_debug" = yes ; then
        CXXFLAGS="$CXXFLAGS -g"
      else
        CXXFLAGS="$CXXFLAGS -O2"
      fi
    ;;
  esac
fi

dnl Check for shared objects
AC_MSG_CHECKING(whether we should create shared objects)
makeshared=false
case $target_os in
  _linux*)
    LDOFLAGS='-shared --whole-archive -rpath $(LIB_DIR)'
    SHLIBSUFFIX=.so
    makeshared=true
  ;;
  x_osf*)
    LDOFLAGS='-shared -rpath $(LIB_DIR)'
    LDOFLAGS=$LDOFLAGS' -set_version $(SELFVER)'
    LDOFLAGS=$LDOFLAGS' -error_unresolved'
    LDONONEFLAG="-none"
    SHLIBSUFFIX=.so
    makeshared=true
  ;;
esac
if test $makeshared = true ; then
  AC_MSG_RESULT(yes)
  SLIBS='$(slibs)'
  LIBSUFFIX=$SHLIBSUFFIX
else
  AC_MSG_RESULT(no)
  LIBSUFFIX=.a
fi
AC_SUBST(SLIBS)
AC_SUBST(LDOFLAGS)
AC_SUBST(LDONONEFLAG)
AC_SUBST(SHLIBSUFFIX)
AC_SUBST(COMMONVER)
AC_SUBST(CLIENTLIBVER)
AC_SUBST(SUPPORTVER)
AC_SUBST(SELFVER)

AC_ARG_WITH(ems-libs, [  --with-ems-libs search first in this directory for ems libraries],
	emslibs=$withval, emslibs="")

EMS_SEARCH_COMMON
EMS_SEARCH_COMMONLIB(.$COMMONVER$LIBSUFFIX)
AC_SUBST(EMSCOMMON)
AC_SUBST(EMSEXCOMMON)
AC_SUBST(EMSCOMMONLIB)

EMS_SEARCH_CLIENT
EMS_SEARCH_CLIENTLIB(xx.$CLIENTLIBVER$LIBSUFFIX)
AC_SUBST(EMSCLIENT)
AC_SUBST(EMSCLIENTLIB)

EMS_SEARCH_SUPPORT
EMS_SEARCH_SUPPORTLIB(.$SUPPORTVER$LIBSUFFIX)
AC_SUBST(EMSSUPPORT)
AC_SUBST(EMSSUPPORTLIB)
AC_SUBST(CXXFLAGS)

AC_LANG_CPLUSPLUS

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/cdefs.h)

AC_CHECK_HEADERS(String.h)
AC_CHECK_HEADERS(string)

AC_MSG_CHECKING(whether we have to use namespaces)
SAVED_CXXFLAGS=$CXXFLAGS
CXXFLAGS="$CXXFLAGS $WERROR"
AC_CACHE_VAL(ems_cv_namespaces,
AC_TRY_COMPILE([
#if defined (__STD_STRICT_ANSI) || defined (__STRICT_ANSI__)
#include <iostream>
#else
#include <iostream.h>
#endif
namespace xxx {
int i;
}
using namespace std;
], [
xxx::i=13;
],
ems_cv_namespaces=yes,
ems_cv_namespaces=no))
AC_MSG_RESULT($ems_cv_namespaces)
if test $ems_cv_namespaces = yes ; then
    AC_DEFINE(HAVE_NAMESPACES)
fi
CXXFLAGS=$SAVED_CXXFLAGS

AC_MSG_CHECKING([ob gethostname() brauchbar definiert ist])
AC_CACHE_VAL(ems_cv_header_gethostname_def,
  AC_TRY_COMPILE([
    #include <unistd.h>
    ], [
    int res; char name[[256]];
    res=gethostname(name, 256);
    ],
    ems_cv_header_gethostname_def=yes,
    ems_cv_header_gethostname_def=no))
AC_MSG_RESULT($ems_cv_header_gethostname_def)
if test $ems_cv_header_gethostname_def = no ; then
	AC_DEFINE(NEED_GETHOSTNAMEDEF)
fi

AC_MSG_CHECKING([ob ntohl() brauchbar definiert ist])
AC_CACHE_VAL(ems_cv_header_ntohl_def,
  AC_TRY_COMPILE([
    #include <sys/types.h>
    #include <netinet/in.h>
    ], [
    unsigned int res;
    res=ntohl(17);
    ],
    ems_cv_header_ntohl_def=yes,
    ems_cv_header_ntohl_def=no))
AC_MSG_RESULT($ems_cv_header_ntohl_def)
if test $ems_cv_header_ntohl_def = no ; then
	AC_DEFINE(NEED_NTOHLDEF)
fi

AC_MSG_CHECKING([ob inet_addr() brauchbar definiert ist])
AC_CACHE_VAL(ems_cv_header_inet_addr_def,
	AC_TRY_COMPILE([#include <arpa/inet.h>], [
		unsigned int res;
		res=inet_addr("");
		],
		ems_cv_header_inet_addr_def=yes,
		ems_cv_header_inet_addr_def=no))
AC_MSG_RESULT($ems_cv_header_inet_addr_def)
if test $ems_cv_header_inet_addr_def = no ; then
	AC_DEFINE(NEED_INET_ADDRDEF)
fi

AC_MSG_CHECKING([whether bool is defined])
AC_CACHE_VAL(ems_cv_header_bool_def,
AC_TRY_COMPILE([], [
bool b;
b=true;
], ems_cv_header_bool_def=yes, ems_cv_header_bool_def=no))
AC_MSG_RESULT($ems_cv_header_bool_def)
if test $ems_cv_header_bool_def = no ; then
        AC_DEFINE(NEED_BOOL)
fi

dnl Checks for typedefs, structures, and compiler characteristics.

dnl Checks for library functions.

AC_CONFIG_HEADER(config.h)
AC_OUTPUT(Makefile)
